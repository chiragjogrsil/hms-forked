"use client"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"
import { CalendarIcon } from 'lucide-react'
import { format } from "date-fns"
import { useEffect } from "react"

import { Button } from "@/components/ui/button"
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { useToast } from "@/hooks/use-toast"

// Update the form schema to match the new requirements
const quickPatientFormSchema = z.object({
  firstName: z.string().min(2, {
    message: "First name must be at least 2 characters.",
  }),
  lastName: z.string().min(2, {
    message: "Last name must be at least 2 characters.",
  }),
  careOf: z.string().optional().or(z.literal("")),
  dateOfBirth: z.date({
    required_error: "Date of birth is required.",
  }),
  gender: z.enum(["male", "female", "other"]),
  category: z.string(),
  mobileNumber: z.string().min(10, {
    message: "Mobile number must be at least 10 digits.",
  }),
  reason: z.string().min(2, {
    message: "Reason for visit is required.",
  }),
  urgency: z.enum(["normal", "urgent", "emergency"]),
})

type QuickPatientFormValues = z.infer<typeof quickPatientFormSchema>

interface QuickRegistrationDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  onPatientRegistered?: (data: any) => void
}

export function QuickRegistrationDialog({ open, onOpenChange, onPatientRegistered }: QuickRegistrationDialogProps) {
  const { toast } = useToast()

  const form = useForm<QuickPatientFormValues>({
    resolver: zodResolver(quickPatientFormSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      careOf: "",
      dateOfBirth: undefined, // This will be properly set by the date picker
      gender: "male",
      mobileNumber: "",
      category: "general",
      reason: "",
      urgency: "normal",
    },
    mode: "onChange",
  })

  // Reset form when dialog closes
  useEffect(() => {
    if (!open) {
      // Use setTimeout to ensure the form reset happens after the dialog animation
      setTimeout(() => {
        form.reset({
          firstName: "",
          lastName: "",
          careOf: "",
          dateOfBirth: undefined,
          gender: "male",
          mobileNumber: "",
          category: "general",
          reason: "",
          urgency: "normal",
        })
      }, 300)
    }
  }, [open, form])

  function onSubmit(data: QuickPatientFormValues) {
    console.log("Quick registration data:", data)

    // Generate a patient ID (in a real app, this would come from the backend)
    const patientId = `P${Math.floor(10000 + Math.random() * 90000)}`

    // Format the patient name
    const patientName = `${data.firstName} ${data.lastName}`

    // Create a token number (in a real app, this would be generated by the system)
    const tokenNumber = `T${Math.floor(100 + Math.random() * 900)}`

    // Create the patient data object
    const patientData = {
      id: patientId,
      name: patientName,
      careOf: data.careOf,
      mobileNumber: data.mobileNumber,
      dateOfBirth: data.dateOfBirth,
      gender: data.gender,
      category: data.category,
      reason: data.reason,
      urgency: data.urgency,
      tokenNumber,
      registrationTime: new Date(),
    }

    // Call the onPatientRegistered callback if provided
    if (onPatientRegistered) {
      onPatientRegistered(patientData)
    }

    // Close the dialog
    onOpenChange(false)

    // Show a success toast
    toast({
      title: "Patient registered successfully",
      description: `${patientName} has been registered with token number ${tokenNumber}.`,
    })
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Quick Patient Registration</DialogTitle>
          <DialogDescription>
            Register a walk-in patient quickly. Required fields are marked with an asterisk (*).
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid gap-6 md:grid-cols-2">
              <FormField
                control={form.control}
                name="firstName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>First Name *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="John"
                        value={field.value || ""}
                        onChange={field.onChange}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="lastName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Last Name *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Doe"
                        value={field.value || ""}
                        onChange={field.onChange}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="careOf"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>C/O (Care Of)</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="Guardian or caretaker name"
                      value={field.value || ""}
                      onChange={field.onChange}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid gap-6 md:grid-cols-2">
              <FormField
                control={form.control}
                name="dateOfBirth"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel>Date of Birth *</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant={"outline"}
                            className={`w-full pl-3 text-left font-normal ${!field.value && "text-muted-foreground"}`}
                          >
                            {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          disabled={(date) => date > new Date()}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="gender"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Gender *</FormLabel>
                    <FormControl>
                      <RadioGroup onValueChange={field.onChange} value={field.value} className="flex gap-4">
                        <FormItem className="flex items-center space-x-2 space-y-0">
                          <FormControl>
                            <RadioGroupItem value="male" />
                          </FormControl>
                          <FormLabel className="font-normal">Male</FormLabel>
                        </FormItem>
                        <FormItem className="flex items-center space-x-2 space-y-0">
                          <FormControl>
                            <RadioGroupItem value="female" />
                          </FormControl>
                          <FormLabel className="font-normal">Female</FormLabel>
                        </FormItem>
                        <FormItem className="flex items-center space-x-2 space-y-0">
                          <FormControl>
                            <RadioGroupItem value="other" />
                          </FormControl>
                          <FormLabel className="font-normal">Other</FormLabel>
                        </FormItem>
                      </RadioGroup>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="grid gap-6 md:grid-cols-2">
              <FormField
                control={form.control}
                name="mobileNumber"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Mobile Number *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="+91 9876543210"
                        value={field.value || ""}
                        onChange={field.onChange}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="category"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Category *</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select category" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="general">General</SelectItem>
                        <SelectItem value="senior">Senior Citizen</SelectItem>
                        <SelectItem value="child">Child</SelectItem>
                        <SelectItem value="staff">Staff</SelectItem>
                        <SelectItem value="vip">VIP</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="reason"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Reason for Visit *</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="Brief description of the reason for visit"
                      value={field.value || ""}
                      onChange={field.onChange}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="urgency"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Urgency *</FormLabel>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select urgency" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="urgent">Urgent</SelectItem>
                      <SelectItem value="emergency">Emergency</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormDescription>This helps prioritize patients in the queue</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
                Cancel
              </Button>
              <Button type="submit">Register & Generate Token</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
}
